/**
 * Compress Module
 */

 // param = {
 // 	type = 0;   //0 text, 1 file, 2 url
 // 	text = '';  //text to compress
 // 	files = ''; //path of the files
 // 	url = '';   //url of the file
 //		....
 // }l
;
(function(){
	var fs = require('fs'),
		exec = require('child_process').exec,
		child,
		base = './uploads/',
		dl = require('./download'),
		util = require('util'),
		clietCallback = function(){};
	exports.download = dl.download;

	//compress function
	exports.compress = function(param){
		clietCallback = param.callback;
		switch(param.type){
			case 0:
				save2file(param.text, param.filetype || 'js', function(file){
					console.log(file);
					compress(param.option, file.path, file.filename, file.filetype, 'input');
				});
			break;
			case 1:
				if(!_isArray(param.files)){
					param.files = [param.files];
				}

				if(param.filetype == 'auto'){
					param.filetype = null;
				}

				for(var i in param.files){
					var file = {};
					file.path = './' + param.files[i].path;
					file.filename = file.path.substring(file.path.lastIndexOf('/') + 1);
					file.filetype = param.filetype || param.files[i].name.substring(param.files[i].name.lastIndexOf('.') + 1).toLowerCase();
					file.oname = param.files[i].name;
					compress(param.option, file.path, file.filename, file.filetype, file.oname);

				}
			break;
			case 2:
				if( !_isArray(param.url) ){
					param.url = [param.url];
				}
				if(param.filetype == 'auto'){
					param.filetype = null;
				}
				for(var i in param.url){
					var url = param.url[i],
						filetype = param.filetype || url.substring(url.lastIndexOf('.') + 1).toLowerCase();
					save2fileURL(url, filetype,function(file){
					console.log(file);
					var oname = url.substring(url.lastIndexOf('/') +1);
					oname = oname.substring(0, oname.indexOf('.'));
					compress(param.option, file.path, file.filename, file.filetype, oname);
				});
				}
			break;
			default:
				console.log('unknown type!');
		}
		
	}

	//@ingore 
	function _isArray(obj){
		return Object.prototype.toString.call( obj ) === '[object Array]';
	}

	//save some text to a new file, filename generated by time
	function save2file(text, filetype, callback){
		var filename = +new Date(),
			path = base + filename + '.' + filetype;

		fs.writeFile(path, text, function(err){
			if(err){
				throw err;
			}
			callback({
				'filename': filename,
				'path': path,
				'filetype': filetype
			});
		});
	}

	//use curl to download file, then invoke the callback
	function save2fileURL(url, filetype, callback){
		if(!url){
			return;
		}
		var originname = url.substring(url.lastIndexOf('/') + 1),
			filetype = filetype || originname.substring(originname.lastIndexOf('.') + 1),
			filename = +new Date(),
			path = base + filename + '.' + filetype,
			command = 'curl ' + url + ' -o ' + path;
		console.log(command);
		child = exec(command, function(error, stdout, stderr){
			if(error !== null){
				console.log('exec error: ' + error);
			}else{
				console.log('curl', path);
				callback({
					'path': path,
					'filetype': filetype,
					'filename': filename
				});
			}
		});
	}

	//compress the file of path
	//retType indicates what'll be return, 0 is content, 1 is the compressed file path
	//for download
	function compress(option, path, filename, filetype, oname){
		var retmsg = {};
		console.log('compress ', path, filename, filetype);
		var command = 'java -jar ./tools/yuicompressor-2.4.7.jar' + option + ' --type ' + filetype + ' -o ' + ' ./tmp/' + filename + '-' + oname + '.min.' + filetype + ' ' + path; 
		console.log(command);
		child = exec(command, function(error, stdout, stderr){
			if(error !== null){
				console.log('exec error:' + error);
				clietCallback({
					'retcode': -1,
					'msg':' file compress failed. 1.check your filetype; 2. Don\'t use keyword as variable.'
				});
			}else{
				console.log('compress success');
							
				var resultPath = './tmp/' + filename + '-' + oname + '.min.' + filetype;

				var originSize = 0, resultSize = 0;

				fs.stat(path, function(err, stats){
					originSize = stats.size;
					if(err){
						console.log('err', err);
					}
					fs.unlink(path, function (err) {
						if (err) throw err;
						console.log('successfully deleted '+ path);
					});
					fs.stat(resultPath, function(err, stats){
						resultSize = stats.size;
						if(err){
							console.log(err);
						}
						retmsg = {
							'path':filename + '-' + oname + '.min.' + filetype,
							'originSize':originSize,
							'resultSize':resultSize,
							'name': oname,
							'msg':'compress success',
							'retcode': 0
						};

						clietCallback(retmsg);
					})
				});
			}
		});
	}
})();

