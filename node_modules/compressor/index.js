/**
 * Compress Module
 */

 // param = {
 // 	type = 0;   //0 text, 1 file, 2 url
 // 	text = '';  //text to compress
 // 	files = ''; //path of the files
 // 	url = '';   //url of the file
 // }
;
(function(){
	var fs = require('fs'),
		exec = require('child_process').exec,
		child,
		base = './uploads/';

	exports.compress = function(param){
		switch(param.type){
			case 0:
				save2file(param.text, param.filetype || 'js', function(file){
					console.log(file);
					compress(file.path, file.filename, file.filetype);
				});
			break;
			case 1:
				if(Object.prototype.toString.call( param.files ) !== '[object Array]'){
					param.files = [param.files];
				}
				for(var i in param.files){
					var file = {};
					file.path = './' + param.files[i].path;
					file.filename = file.path.substring(file.path.lastIndexOf('/') + 1);
					file.filetype = param.files[i].name.substring(param.files[i].name.lastIndexOf('.') + 1);
					
					fs.rename(file.path, file.path + '.' + file.filetype,function(err){
						if (err){
							throw err;	
						}
						file.path += '.' + file.filetype;
						compress(file.path, file.filename, file.filetype);
					});
				}
			break;
			case 2:
				save2fileURL(param.url, function(file){
					console.log(file);
					compress(file.path, file.filename, file.filetype);
				});
			break;
			default:
				console.log('unknown type!');
		}
		
	}

	function save2file(text, filetype, callback){
		var filename = +new Date(),
			path = base + filename + '.' + filetype;

		fs.writeFile(path, text, function(err){
			if(err){
				throw err;
			}
			callback({
				'filename': filename,
				'path': path,
				'filetype': filetype
			});
		});
	}

	//use curl to download file, then invoke the callback
	function save2fileURL(url, callback){
		if(!url){
			return;
		}
		var originname = url.substring(url.lastIndexOf('/') + 1),
			filetype = originname.substring(originname.lastIndexOf('.') + 1),
			filename = +new Date(),
			path = base + filename + '.' + filetype,
			command = 'curl ' + url + ' -o ' + path;
		console.log(command);
		child = exec(command, function(error, stdout, stderr){
			if(error !== null){
				console.log('exec error: ' + error);
			}else{
				console.log('curl', path);
				callback({
					'path': path,
					'filetype': filetype,
					'filename': filename
				});
			}
		});
	}

	//compress the file of path
	//retType indicates what'll be return, 0 is content, 1 is the compressed file path
	//for download
	function compress(path, filename, filetype){
		var command = 'java -jar ./tools/yuicompressor-2.4.7.jar -o ' + ' ./tmp/' + filename + '.min.' + filetype + ' ' + path; 
		console.log(command);
		child = exec(command, function(error, stdout, stderr){
			if(error !== null){
				console.log('exec error:' + error);
			}else{
				console.log('compress success');
				fs.unlink(path, function (err) {
				  if (err) throw err;
				  console.log('successfully deleted '+ path);
				});
			}
		});
	}
})();

